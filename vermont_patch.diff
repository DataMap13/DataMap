diff --git a/DataMap/vermont/CMakeLists.txt b/DataMap2/vermont/CMakeLists.txt
index 77951e7..6fc2524 100644
--- a/DataMap/vermont/CMakeLists.txt
+++ b/DataMap2/vermont/CMakeLists.txt
@@ -297,20 +297,20 @@ ENDIF (MYSQL_FOUND AND SUPPORT_MYSQL)
 OPTION(SUPPORT_POSTGRESQL "Enable PostgreSQL support" OFF)
 IF (SUPPORT_POSTGRESQL)
 	FIND_PACKAGE(PostgreSQL REQUIRED)
-	IF (NOT PostgreSQL_FOUND)
+	IF (NOT POSTGRESQL_FOUND)
 		MESSAGE(FATAL_ERROR "Could not find PostgreSQL libraries.")
-	ENDIF (NOT PostgreSQL_FOUND)
+	ENDIF (NOT POSTGRESQL_FOUND)
 ENDIF (SUPPORT_POSTGRESQL)
-IF (PostgreSQL_FOUND)
+IF (POSTGRESQL_FOUND)
 	MESSAGE(STATUS "Found PostgreSQL libraries")
 	ADD_DEFINITIONS(-DPG_SUPPORT_ENABLED)
-	INCLUDE_DIRECTORIES(${PostgreSQL_INCLUDE_DIRS})
+	INCLUDE_DIRECTORIES(${POSTGRESQL_INCLUDE_DIR})
 	TARGET_LINK_LIBRARIES(vermont
-		${PostgreSQL_LIBRARIES}
+		${POSTGRESQL_LIBRARIES}
 	)
-ELSE (PostgreSQL_FOUND)
+ELSE (POSTGRESQL_FOUND)
 	REMOVE_DEFINITIONS(-DPG_SUPPORT_ENABLED)
-ENDIF (PostgreSQL_FOUND)
+ENDIF (POSTGRESQL_FOUND)
 
 ### Oracle
 
diff --git a/DataMap2/vermont/cmake/modules/FindPostgreSQL.cmake b/DataMap2/vermont/cmake/modules/FindPostgreSQL.cmake
new file mode 100644
index 0000000..122b26d
--- /dev/null
+++ b/DataMap2/vermont/cmake/modules/FindPostgreSQL.cmake
@@ -0,0 +1,59 @@
+# - Find PostgreSQL
+# Find the PostgreSQL includes and client library
+# This module defines
+#  POSTGRESQL_INCLUDE_DIR, where to find POSTGRESQL.h
+#  POSTGRESQL_LIBRARIES, the libraries needed to use POSTGRESQL.
+#  POSTGRESQL_FOUND, If false, do not try to use PostgreSQL.
+#
+# Copyright (c) 2006, Jaroslaw Staniek, <js@iidea.pl>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+# Add the postgresql and mysql include paths here
+
+if(POSTGRESQL_INCLUDE_DIR AND POSTGRESQL_LIBRARIES)
+   set(POSTGRESQL_FOUND TRUE)
+
+else(POSTGRESQL_INCLUDE_DIR AND POSTGRESQL_LIBRARIES)
+
+
+
+# FIND_PATH(POSTGRESQL_INCLUDE_DIR postgres.h
+	find_path(POSTGRESQL_INCLUDE_DIR libpq-fe.h
+      /usr/include/server
+      /usr/include/pgsql/server
+      /usr/local/include/pgsql/server
+      /usr/include/postgresql
+      /usr/include/postgresql/server
+      /usr/include/postgresql/*/server
+      /usr/local/include/postgresql/server
+      /usr/local/include/postgresql/*/server
+      $ENV{ProgramFiles}/PostgreSQL/*/include/server
+      $ENV{SystemDrive}/PostgreSQL/*/include/server
+      )
+
+  find_library(POSTGRESQL_LIBRARIES NAMES pq libpq
+     PATHS
+     /usr/lib
+     /usr/local/lib
+     /usr/lib/postgresql
+     /usr/lib64
+     /usr/local/lib64
+     /usr/lib64/postgresql
+     $ENV{ProgramFiles}/PostgreSQL/*/lib/ms
+     $ENV{SystemDrive}/PostgreSQL/*/lib/ms
+     )
+      
+  if(POSTGRESQL_INCLUDE_DIR AND POSTGRESQL_LIBRARIES)
+    set(POSTGRESQL_FOUND TRUE)
+    message(STATUS "Found PostgreSQL: ${POSTGRESQL_INCLUDE_DIR}, ${POSTGRESQL_LIBRARIES}")
+    INCLUDE_DIRECTORIES(${POSTGRESQL_INCLUDE_DIR})
+  else(POSTGRESQL_INCLUDE_DIR AND POSTGRESQL_LIBRARIES)
+    set(POSTGRESQL_FOUND FALSE)
+    message(STATUS "PostgreSQL not found.")
+  endif(POSTGRESQL_INCLUDE_DIR AND POSTGRESQL_LIBRARIES)
+
+  mark_as_advanced(POSTGRESQL_INCLUDE_DIR POSTGRESQL_LIBRARIES)
+
+endif(POSTGRESQL_INCLUDE_DIR AND POSTGRESQL_LIBRARIES)
diff --git a/DataMap2/vermont/db_config.xml b/DataMap2/vermont/db_config.xml
new file mode 100644
index 0000000..85539e1
--- /dev/null
+++ b/DataMap2/vermont/db_config.xml
@@ -0,0 +1,90 @@
+<ipfixConfig>
+
+	<observer id="1">
+		<interface>wlan0</interface>
+		<pcap_filter>ip</pcap_filter>
+		<next>2</next>
+	</observer>
+
+	<packetAggregator id="2">
+		<rule>
+			<flowKey>
+				<ieName>sourceIPv4Address</ieName>
+			</flowKey>
+			<flowKey>
+				<ieName>destinationIPv4Address</ieName>
+			</flowKey>
+			<flowKey>
+				<ieName>protocolIdentifier</ieName>
+			</flowKey>
+			<flowKey>
+				<ieName>sourceTransportPort</ieName>
+			</flowKey>
+			<flowKey>
+				<ieName>destinationTransportPort</ieName>
+			</flowKey>
+			<nonFlowKey>
+				<ieName>flowStartMilliSeconds</ieName>
+			</nonFlowKey>
+			<nonFlowKey>
+				<ieName>flowEndMilliSeconds</ieName>
+			</nonFlowKey>
+			<nonFlowKey>
+				<ieName>octetDeltaCount</ieName>
+			</nonFlowKey>
+			<nonFlowKey>
+				<ieName>packetDeltaCount</ieName>
+			</nonFlowKey>
+			<nonFlowKey>
+				<ieName>tcpControlBits</ieName>
+			</nonFlowKey>
+		</rule>
+		<pollInterval unit="msec">{interval}</pollInterval>
+		<next>3</next>
+	</packetAggregator>
+
+	<anonRecord id="3">
+		<anonField>
+			<anonIE>
+				<ieName>sourceIPv4Address</ieName>
+			</anonIE>
+			<anonMethod>CryptoPan</anonMethod>
+			<anonParam>0xB92A327F6AF02694A10ABF7FC8A4CFE8AEB8A4A14325EC1E7A3D1E648D50E260</anonParam>
+		</anonField>
+		<anonField>
+			<anonIE>
+				<ieName>destinationIPv4Address</ieName>
+			</anonIE>
+			<anonMethod>CryptoPan</anonMethod>
+			<anonParam>0xB92A327F6AF02694A10ABF7FC8A4CFE8AEB8A4A14325EC1E7A3D1E648D50E260</anonParam>
+		</anonField>
+		<next>4</next>
+	</anonRecord>
+
+	<ipfixDbWriter id="4">
+		<host>{server_addr}</host>
+		<port>{db_port}</port>
+		<dbname>{db_name}</dbname>
+		<username>{db_username}</username>
+		<password>{db_password}</password>
+		<bufferrecords>1</bufferrecords>
+		<nodeId>{node_id}</nodeId>
+		<location>
+			<latitude>{latitude}</latitude>
+			<longitude>{longitude}</longitude>
+		</location>
+		<interval>{interval}</interval>
+		<columns>
+			<name>firstSwitchedMillis</name>
+			<name>srcIP</name>
+			<name>dstIP</name>
+			<name>srcPort</name>
+			<name>dstPort</name>
+			<name>proto</name>
+			<name>pkts</name>
+			<name>bytes</name>
+			<name>tcpControlBits</name>
+		</columns>
+	</ipfixDbWriter>
+
+</ipfixConfig>
diff --git a/DataMap2/vermont/print_config.xml b/DataMap2/vermont/print_config.xml
new file mode 100644
index 0000000..c17e1a6
--- /dev/null
+++ b/DataMap2/vermont/print_config.xml
@@ -0,0 +1,67 @@
+<ipfixConfig>
+
+	<observer id="1">
+		<interface>wlan0</interface>
+		<pcap_filter>ip</pcap_filter>
+		<next>2</next>
+	</observer>
+
+	<packetAggregator id="2">
+		<rule>
+			<flowKey>
+				<ieName>sourceIPv4Address</ieName>
+			</flowKey>
+			<flowKey>
+				<ieName>destinationIPv4Address</ieName>
+			</flowKey>
+			<flowKey>
+				<ieName>protocolIdentifier</ieName>
+			</flowKey>
+			<flowKey>
+				<ieName>sourceTransportPort</ieName>
+			</flowKey>
+			<flowKey>
+				<ieName>destinationTransportPort</ieName>
+			</flowKey>
+			<nonFlowKey>
+				<ieName>flowStartMilliSeconds</ieName>
+			</nonFlowKey>
+			<nonFlowKey>
+				<ieName>flowEndMilliSeconds</ieName>
+			</nonFlowKey>
+			<nonFlowKey>
+				<ieName>octetDeltaCount</ieName>
+			</nonFlowKey>
+			<nonFlowKey>
+				<ieName>packetDeltaCount</ieName>
+			</nonFlowKey>
+			<nonFlowKey>
+				<ieName>tcpControlBits</ieName>
+			</nonFlowKey>
+		</rule>
+		<next>3</next>
+	</packetAggregator>
+
+<!--	<anonRecord id="3">
+		<anonField>
+			<anonIE>
+				<ieName>sourceIPv4Address</ieName>
+			</anonIE>
+			<anonMethod>CryptoPan</anonMethod>
+			<anonParam>0xB92A327F6AF02694A10ABF7FC8A4CFE8AEB8A4A14325EC1E7A3D1E648D50E260</anonParam>
+		</anonField>
+		<anonField>
+			<anonIE>
+				<ieName>destinationIPv4Address</ieName>
+			</anonIE>
+			<anonMethod>CryptoPan</anonMethod>
+			<anonParam>0xB92A327F6AF02694A10ABF7FC8A4CFE8AEB8A4A14325EC1E7A3D1E648D50E260</anonParam>
+		</anonField>
+		<next>4</next>
+	</anonRecord> -->
+
+	<ipfixPrinter id="3">
+		<outputType>line</outputType>
+	</ipfixPrinter>
+
+</ipfixConfig>
diff --git a/DataMap/vermont/src/modules/ipfix/IpfixDbCommon.hpp b/DataMap2/vermont/src/modules/ipfix/IpfixDbCommon.hpp
index 1d2d2b5..329d2e6 100644
--- a/DataMap/vermont/src/modules/ipfix/IpfixDbCommon.hpp
+++ b/DataMap2/vermont/src/modules/ipfix/IpfixDbCommon.hpp
@@ -65,4 +65,8 @@
 #define CN_flowStartSysUpTime	"flowStartSysUpTime"
 #define CN_flowEndSysUpTime	"flowEndSysUpTime"
 
+#define CN_nodeId "nodeId"
+#define CN_latitude "latitude"
+#define CN_longitude "longitude"
+
 #endif
diff --git a/DataMap/vermont/src/modules/ipfix/IpfixDbWriter.cpp b/DataMap2/vermont/src/modules/ipfix/IpfixDbWriter.cpp
index 28fb17e..4cddb66 100644
--- a/DataMap/vermont/src/modules/ipfix/IpfixDbWriter.cpp
+++ b/DataMap2/vermont/src/modules/ipfix/IpfixDbWriter.cpp
@@ -46,9 +46,9 @@ const IpfixDbWriter::Column IpfixDbWriter::identify [] = {
 	{CN_pkts, 		"BIGINT(20) UNSIGNED", 		0, IPFIX_TYPEID_packetDeltaCount, 0},
 	{CN_firstSwitched, 	"INTEGER(10) UNSIGNED", 	0, IPFIX_TYPEID_flowStartSeconds, 0}, // default value is invalid/not used for this ent
 	{CN_lastSwitched, 	"INTEGER(10) UNSIGNED", 	0, IPFIX_TYPEID_flowEndSeconds, 0}, // default value is invalid/not used for this entry
-	{CN_firstSwitchedMillis, "SMALLINT(5) UNSIGNED", 	0, IPFIX_TYPEID_flowStartMilliSeconds, 0},
-	{CN_lastSwitchedMillis, "SMALLINT(5) UNSIGNED", 	0, IPFIX_TYPEID_flowEndMilliSeconds, 0},
-	{CN_tcpControlBits,  	"SMALLINT(5) UNSIGNED", 	0, IPFIX_TYPEID_tcpControlBits, 0},
+	{CN_firstSwitchedMillis, "BIGINT UNSIGNED", 	0, IPFIX_TYPEID_flowStartMilliSeconds, 0},
+	{CN_lastSwitchedMillis, "BIGINT UNSIGNED", 	0, IPFIX_TYPEID_flowEndMilliSeconds, 0},
+	{CN_tcpControlBits,  	"BIGINT UNSIGNED", 	0, IPFIX_TYPEID_tcpControlBits, 0},
 	//TODO: use enterprise number for the following extended types (Gerhard, 12/2009)
 	{CN_revbytes, 		"BIGINT(20) UNSIGNED", 		0, IPFIX_TYPEID_octetDeltaCount, IPFIX_PEN_reverse},
 	{CN_revpkts, 		"BIGINT(20) UNSIGNED", 		0, IPFIX_TYPEID_packetDeltaCount, IPFIX_PEN_reverse},
@@ -61,6 +61,9 @@ const IpfixDbWriter::Column IpfixDbWriter::identify [] = {
 	{CN_exporterID, 	"SMALLINT(5) UNSIGNED", 	0, EXPORTERID, 0},
 	{CN_flowStartSysUpTime,	"INTEGER(10) UNSIGNED",		0, IPFIX_TYPEID_flowStartSysUpTime, 0},
 	{CN_flowEndSysUpTime,	"INTEGER(10) UNSIGNED",		0, IPFIX_TYPEID_flowEndSysUpTime, 0},
+	{CN_nodeId,	"INT",	0,	NODEIDID,	0},
+	{CN_latitude,	"INT",	0,	LATITUDEID,	0},
+	{CN_longitude,	"INT",	0,	LONGITUDEID,	0},
 	{0} // last entry must be 0
 };
 
@@ -198,7 +201,7 @@ void IpfixDbWriter::processDataDataRecord(const IpfixRecord::SourceID& sourceID,
 
 	// write to db if maxInserts is reached
 	if(numberOfInserts == maxInserts) {
-		msg(MSG_DEBUG, "IpfixDbWriter: Writing buffered records to database");
+		msg(MSG_DEBUG, "IpfixDbWriter: Writing buffered records to database with statement %s", insertStatement.str().c_str());
 		writeToDb();
 		numberOfInserts = 0;
 	}
@@ -362,7 +365,12 @@ string& IpfixDbWriter::getInsertString(string& row, time_t& flowstartsec, const
 							flowstartsec = intdata/1000;
 					case IPFIX_TYPEID_flowEndMilliSeconds:
 						// in the database the millisecond entry is counted from last second
-						intdata %= 1000;
+						// DataMap: we are writing the full time to the database (seconds and milliseconds),
+						//	so this modulo is unwanted
+						//intdata %= 1000;
+						// However, we do want to round down to the start time of the interval in which the packet
+						//	was observed
+						intdata = (intdata / interval) * interval;
 						break;
 				}
 			} else if (col->enterprise==IPFIX_PEN_reverse)
@@ -377,11 +385,22 @@ string& IpfixDbWriter::getInsertString(string& row, time_t& flowstartsec, const
 
 		DPRINTF("saw ipfix id %d in packet with intdata %llX", col->ipfixId, intdata);
 
-		if(first)
+		if (first) {
+			first = false;
+		} else {
+			rowStream << ",";
+		}
+		
+		if (col->ipfixId == NODEIDID) {
+			rowStream << "'" << nodeId << "'";
+		}else if (col->ipfixId == LATITUDEID) {
+			rowStream << latitude;
+		} else if (col->ipfixId == LONGITUDEID) {
+			rowStream << longitude;
+		} else {
 			rowStream << intdata;
-		else
-			rowStream << "," << intdata;
-		first = false;
+		}
+		
 	}
 
 	rowStream << ")";
@@ -451,7 +470,6 @@ int IpfixDbWriter::setCurrentTable(time_t flowstartsec)
 		dbError = true;
 		return 1;
 	}
-	msg(MSG_DEBUG, "IpfixDbWriter: Table %s created ", currentTable.name.c_str());
 
 	return 0;
 }
@@ -583,11 +601,17 @@ void IpfixDbWriter::onDataRecord(IpfixDataRecord* record)
 IpfixDbWriter::IpfixDbWriter(const string& hostname, const string& dbname,
 				const string& username, const string& password,
 				unsigned port, uint32_t observationDomainId, unsigned maxStatements,
-				const vector<string>& columns)
+				const int32_t nodeId_in, const int32_t latitude_in, const int32_t longitude_in,
+				const int32_t interval_in, const vector<string>& columns)
 	: currentExporter(NULL), numberOfInserts(0), maxInserts(maxStatements),
 	dbHost(hostname), dbName(dbname), dbUser(username), dbPassword(password), dbPort(port), conn(0)
 {
 	int i;
+	
+	nodeId = nodeId_in;
+	latitude = latitude_in;
+	longitude = longitude_in;
+	interval = interval_in;
 
 	// set default source id
 	srcId.exporterAddress.len = 0;
diff --git a/DataMap/vermont/src/modules/ipfix/IpfixDbWriter.hpp b/DataMap2/vermont/src/modules/ipfix/IpfixDbWriter.hpp
index 64b3dca..0d2ab07 100644
--- a/DataMap/vermont/src/modules/ipfix/IpfixDbWriter.hpp
+++ b/DataMap2/vermont/src/modules/ipfix/IpfixDbWriter.hpp
@@ -36,6 +36,9 @@
 #include <sstream>
 
 #define EXPORTERID 0
+#define NODEIDID 1001
+#define LATITUDEID 1002
+#define LONGITUDEID 1003
 
 /**
  * IpfixDbWriter powered the communication to the database server
@@ -48,7 +51,8 @@ class IpfixDbWriter
 		IpfixDbWriter(const string& hostname, const string& dbname,
 				const string& username, const string& password,
 				unsigned port, uint32_t observationDomainId, unsigned maxStatements,
-				const vector<string>& columns);
+				const int32_t nodeId, const int32_t latitude, const int32_t interval,
+				const int32_t longitude, const vector<string>& columns);
 		~IpfixDbWriter();
 
 		void onDataRecord(IpfixDataRecord* record);
@@ -123,6 +127,12 @@ class IpfixDbWriter
 		bool equalExporter(const IpfixRecord::SourceID& a, const IpfixRecord::SourceID& b);
 
 		const static Column identify[];
+		
+		int32_t nodeId;
+		int32_t latitude;
+		int32_t longitude;
+		int32_t interval;
+		
 };
 
 
diff --git a/DataMap/vermont/src/modules/ipfix/IpfixDbWriterCfg.cpp b/DataMap2/vermont/src/modules/ipfix/IpfixDbWriterCfg.cpp
index 64750d9..5121b60 100644
--- a/DataMap/vermont/src/modules/ipfix/IpfixDbWriterCfg.cpp
+++ b/DataMap2/vermont/src/modules/ipfix/IpfixDbWriterCfg.cpp
@@ -60,6 +60,13 @@ IpfixDbWriterCfg::IpfixDbWriterCfg(XMLElement* elem)
 		} else if (e->matches("observationDomainId")) {
 			observationDomainId = getInt("observationDomainId");
 		} else if (e->matches("next")) { // ignore next
+		} else if (e->matches("nodeId")) {
+			colNames.push_back("nodeId");
+			nodeId = atoi(e->getFirstText().c_str());
+		} else if (e->matches("location")) {
+			readLocation(e);
+		} else if (e->matches("interval")) {
+			interval = atoi(e->getFirstText().c_str());
 		} else {
 			msg(MSG_FATAL, "Unknown IpfixDbWriter config statement %s\n", e->getName().c_str());
 			continue;
@@ -72,7 +79,6 @@ IpfixDbWriterCfg::IpfixDbWriterCfg(XMLElement* elem)
 }
 
 void IpfixDbWriterCfg::readColumns(XMLElement* elem) {
-	colNames.clear();
 	XMLNode::XMLSet<XMLElement*> set = elem->getElementChildren();
 	for (XMLNode::XMLSet<XMLElement*>::iterator it = set.begin();
 	     it != set.end();
@@ -89,6 +95,27 @@ void IpfixDbWriterCfg::readColumns(XMLElement* elem) {
 
 }
 
+void IpfixDbWriterCfg::readLocation(XMLElement* elem) {
+	XMLNode::XMLSet<XMLElement*> set = elem->getElementChildren();
+	for (XMLNode::XMLSet<XMLElement*>::iterator it = set.begin();
+			it != set.end();
+			it++) {
+		XMLElement* e = *it;
+		
+		if (e->matches("latitude")) {
+			colNames.push_back("latitude");
+			latitude = atoi((e->getFirstText()).c_str());
+		} else if (e->matches("longitude")) {
+			colNames.push_back("longitude");
+			longitude = atoi((e->getFirstText()).c_str());
+		} else {
+			msg(MSG_FATAL, "Unknown IpfixDbWriter config statement %s\n", e->getName().c_str());
+			continue;
+		}
+		
+	}
+}
+
 IpfixDbWriterCfg::~IpfixDbWriterCfg()
 {
 }
@@ -96,7 +123,8 @@ IpfixDbWriterCfg::~IpfixDbWriterCfg()
 
 IpfixDbWriter* IpfixDbWriterCfg::createInstance()
 {
-    instance = new IpfixDbWriter(hostname, dbname, user, password, port, observationDomainId, bufferRecords, colNames);
+    instance = new IpfixDbWriter(hostname, dbname, user, password, port, observationDomainId,
+		bufferRecords, nodeId, latitude, longitude, interval, colNames);
     return instance;
 }
 
diff --git a/DataMap/vermont/src/modules/ipfix/IpfixDbWriterCfg.h b/DataMap2/vermont/src/modules/ipfix/IpfixDbWriterCfg.h
index 13927df..e061502 100644
--- a/DataMap/vermont/src/modules/ipfix/IpfixDbWriterCfg.h
+++ b/DataMap2/vermont/src/modules/ipfix/IpfixDbWriterCfg.h
@@ -55,8 +55,12 @@ protected:
 	uint16_t bufferRecords;	/**< amount of records to buffer until they are written to database */
 	uint32_t observationDomainId;	/**< default observation domain id (overrides the one received in the records */
 	vector<string> colNames; /**< column names */
+	int32_t nodeId;
+	int32_t latitude, longitude;
+	int32_t interval;
 
 	void readColumns(XMLElement* elem);
+	void readLocation(XMLElement* elem);
 	IpfixDbWriterCfg(XMLElement*);
 };
 
diff --git a/DataMap/vermont/src/modules/ipfix/aggregator/BaseAggregator.h b/DataMap2/vermont/src/modules/ipfix/aggregator/BaseAggregator.h
index b812026..6d6b6ae 100644
--- a/DataMap/vermont/src/modules/ipfix/aggregator/BaseAggregator.h
+++ b/DataMap2/vermont/src/modules/ipfix/aggregator/BaseAggregator.h
@@ -61,9 +61,10 @@ protected:
 	virtual void performStart();
 	virtual void performShutdown();
 	
+	uint32_t pollInterval; /**< polling interval in milliseconds */
+	
 private:
 	Thread thread;
-	uint32_t pollInterval; /**< polling interval in milliseconds */
 	
 	static void* threadWrapper(void* instance);
 };
diff --git a/DataMap/vermont/src/modules/ipfix/aggregator/HashtableBuckets.h b/DataMap2/vermont/src/modules/ipfix/aggregator/HashtableBuckets.h
index 6ef3442..3eb06c0 100644
--- a/DataMap/vermont/src/modules/ipfix/aggregator/HashtableBuckets.h
+++ b/DataMap2/vermont/src/modules/ipfix/aggregator/HashtableBuckets.h
@@ -42,6 +42,7 @@ public:
 	uint32_t observationDomainID;
 	BucketListElement* listNode;
 	uint32_t hash;
+	suseconds_t window;
 };
 
 
diff --git a/DataMap/vermont/src/modules/ipfix/aggregator/PacketAggregator.cpp b/DataMap2/vermont/src/modules/ipfix/aggregator/PacketAggregator.cpp
index 8feb4aa..fa5387a 100644
--- a/DataMap/vermont/src/modules/ipfix/aggregator/PacketAggregator.cpp
+++ b/DataMap2/vermont/src/modules/ipfix/aggregator/PacketAggregator.cpp
@@ -72,7 +72,7 @@ void PacketAggregator::receive(Packet* e)
 BaseHashtable* PacketAggregator::createHashtable(Rule* rule, uint16_t minBufferTime,
 		uint16_t maxBufferTime, uint8_t hashbits)
 {
-	return new PacketHashtable(this, rule, minBufferTime, maxBufferTime, hashbits);
+	return new PacketHashtable(this, rule, minBufferTime, maxBufferTime, hashbits, pollInterval);
 }
 
 
diff --git a/DataMap/vermont/src/modules/ipfix/aggregator/PacketHashtable.cpp b/DataMap2/vermont/src/modules/ipfix/aggregator/PacketHashtable.cpp
index 9ada6a1..45801de 100644
--- a/DataMap/vermont/src/modules/ipfix/aggregator/PacketHashtable.cpp
+++ b/DataMap2/vermont/src/modules/ipfix/aggregator/PacketHashtable.cpp
@@ -34,11 +34,12 @@ using namespace InformationElement;
 const uint32_t PacketHashtable::ExpHelperTable::UNUSED = 0xFFFFFFFF;
 
 PacketHashtable::PacketHashtable(Source<IpfixRecord*>* recordsource, Rule* rule,
-		uint16_t minBufferTime, uint16_t maxBufferTime, uint8_t hashbits)
+		uint16_t minBufferTime, uint16_t maxBufferTime, uint8_t hashbits, uint32_t interval_in)
 	: BaseHashtable(recordsource, rule, minBufferTime, maxBufferTime, hashbits),
 	snapshotWritten(false), startTime(time(0))
 {
 	buildExpHelperTable();
+	interval = interval_in;
 }
 
 
@@ -1250,14 +1251,17 @@ void PacketHashtable::aggregateFlow(HashtableBucket* bucket, const Packet* p, bo
  * compares if given hashtable bucket data is equal with raw packet data
  * @returns true if equal, false if not equal
  */
-bool PacketHashtable::equalFlow(IpfixRecord::Data* bucket, const Packet* p)
+bool PacketHashtable::equalFlow(HashtableBucket* bucket, const Packet* p)
 {
+
+	IpfixRecord::Data* data = bucket->data.get();
+
 	for (int i=0; i<expHelperTable.noKeyFields; i++) {
 		ExpFieldData* efd = &expHelperTable.keyFields[i];
 
 		DPRINTFL(MSG_VDEBUG, "equal for i=%u, typeid=%s, length=%u, srcpointer=%X", i, efd->typeId.toString().c_str(), efd->srcLength, p->netHeader+efd->srcIndex);
 		// just compare srcLength bytes, as we still have our original packet data
-		if (memcmp(bucket+efd->dstIndex, p->netHeader+efd->srcIndex, efd->srcLength)!=0)
+		if (memcmp(data+efd->dstIndex, p->netHeader+efd->srcIndex, efd->srcLength)!=0)
 			return false;
 	}
 	return true;
@@ -1268,15 +1272,18 @@ bool PacketHashtable::equalFlow(IpfixRecord::Data* bucket, const Packet* p)
  * (for biflow aggregation)
  * @returns true if equal, false if not equal
  */
-bool PacketHashtable::equalFlowRev(IpfixRecord::Data* bucket, const Packet* p)
+bool PacketHashtable::equalFlowRev(HashtableBucket* bucket, const Packet* p)
 {
+
+	IpfixRecord::Data* data = bucket->data.get();
+	
 	for (int i=0; i<expHelperTable.noKeyFields; i++) {
 		ExpFieldData* efdsrc = &expHelperTable.keyFields[i];
 		ExpFieldData* efddst = expHelperTable.revKeyFieldMapper[i];
 
 		DPRINTFL(MSG_VDEBUG, "equalrev for i=%u, typeid=%s, length=%u, srcpointer=%X", i, efdsrc->typeId.toString().c_str(), efdsrc->srcLength, p->netHeader+efdsrc->srcIndex);
 		// just compare srcLength bytes, as we still have our original packet data
-		if (memcmp(bucket+efddst->dstIndex, p->netHeader+efdsrc->srcIndex, efdsrc->srcLength)!=0)
+		if (memcmp(data+efddst->dstIndex, p->netHeader+efdsrc->srcIndex, efdsrc->srcLength)!=0)
 			return false;
 	}
 	return true;
@@ -1403,7 +1410,10 @@ void PacketHashtable::aggregatePacket(const Packet* p)
 		req.tv_nsec = 50000000;
 		nanosleep(&req, &req);
 	}
-
+	
+	// Determine the window in which the packet was captured
+	suseconds_t window;
+	window = ((p->timestamp.tv_sec*1000 + p->timestamp.tv_usec / 1000) / interval) * interval;
 
 	DPRINTF("PacketHashtable::aggregatePacket()");
 	updatePointers(p);
@@ -1421,7 +1431,7 @@ void PacketHashtable::aggregatePacket(const Packet* p)
 	if (bucket != 0) {
 		// This slot is already used, search spill chain for equal flow
 		while (1) {
-			if (equalFlow(bucket->data.get(), p)) {
+			if (equalFlow(bucket, p) && bucket->window == window) {
 				DPRINTF("aggregate flow in normal direction");
 				aggregateFlow(bucket, p, 0);
 				if (!bucket->forceExpiry) {
@@ -1451,7 +1461,7 @@ void PacketHashtable::aggregatePacket(const Packet* p)
 		HashtableBucket* bucket = buckets[rhash];
 
 		while (bucket!=0) {
-			if (equalFlowRev(bucket->data.get(), p)) {
+			if (equalFlowRev(bucket, p) && bucket->window == window) {
 				DPRINTF("aggregate flow in reverse direction");
 				aggregateFlow(bucket, p, 1);
 				if (!bucket->forceExpiry) {
@@ -1482,6 +1492,7 @@ void PacketHashtable::aggregatePacket(const Packet* p)
 			statEmptyBuckets--;
 		}
 		buckets[hash]->inTable = true;
+		buckets[hash]->window = window;
 
 		if (oldflowcount) {
 			DPRINTFL(MSG_VDEBUG, "oldflowcount: %u", ntohl(*oldflowcount));
diff --git a/DataMap/vermont/src/modules/ipfix/aggregator/PacketHashtable.h b/DataMap2/vermont/src/modules/ipfix/aggregator/PacketHashtable.h
index 8f1a751..98f95e1 100644
--- a/DataMap/vermont/src/modules/ipfix/aggregator/PacketHashtable.h
+++ b/DataMap2/vermont/src/modules/ipfix/aggregator/PacketHashtable.h
@@ -36,7 +36,8 @@ class PacketHashtable : public BaseHashtable
 {
 public:
 	PacketHashtable(Source<IpfixRecord*>* recordsource, Rule* rule,
-			uint16_t minBufferTime, uint16_t maxBufferTime, uint8_t hashbits);
+			uint16_t minBufferTime, uint16_t maxBufferTime, uint8_t hashbits,
+			uint32_t interval_in);
 	virtual ~PacketHashtable();
 
 	void aggregatePacket(const Packet* p);
@@ -161,8 +162,8 @@ private:
 	void aggregateField(const ExpFieldData* efd, HashtableBucket* hbucket,
 					    const IpfixRecord::Data* deltaData, IpfixRecord::Data* data);
 	void aggregateFlow(HashtableBucket* bucket, const Packet* p, bool reverse);
-	bool equalFlow(IpfixRecord::Data* bucket, const Packet* p);
-	bool equalFlowRev(IpfixRecord::Data* bucket, const Packet* p);
+	bool equalFlow(HashtableBucket* bucket, const Packet* p);
+	bool equalFlowRev(HashtableBucket* bucket, const Packet* p);
 	void createMaskedField(IpfixRecord::Data* address, uint8_t imask);
 	void createMaskedFields(const Packet* p);
 	void updatePointers(const Packet* p);
@@ -170,6 +171,8 @@ private:
 	bool isRawPacketPtrVariable(const InformationElement::IeInfo& type);
 	void updateBucketData(HashtableBucket* bucket);
 	uint32_t getDstOffset(const InformationElement::IeInfo& ietype);
+	
+	int interval;
 
 };
 
