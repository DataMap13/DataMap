#!/usr/bin/python

import subprocess
import sys
import threading
import time

from datamap_daemon_common import *

CONFIG_FILE = "../.config"

# Configuration
node_name = "collection_node"

# Node State
last_heartbeat = 0
last_heartbeat_lock = threading.Lock()

# Handler for heartbeat messages from the central server. Tracks the time that the last heartbeat occured.
def handle_heartbeat(conn):
	global last_heartbeat
	print "Handling Heartbeat"
	last_heartbeat_lock.acquire()
	last_heartbeat = time.time()
	last_heartbeat_lock.release()
	conn.send(ACK_MSG)

# Handler for start messages from the central server. Starts vermont.
def handle_start(conn):
	print "Starting Vermont..."
	subprocess.call("./start_vermont &", shell=True)
	print "Vermont Started"
	conn.send(ACK_MSG)

# Handler for stop messages from the central server. Kills vermont.
def handle_stop(conn):
	print "Stopping Vermont..."
	subprocess.call("./stop_vermont", shell=True)
	print "Vermont Stopped"
	conn.send(ACK_MSG)

# Handler for all messages from the central server. Decodes the message and calls the corresponding function
def handle_server_message(conn,addr,msg):
	print "Handling \"" + msg + "\" from " + str(addr)
	if (msg == HEARTBEAT_MSG):
		handle_heartbeat(conn)
	elif (msg == START_MSG):
		handle_start(conn)
	elif (msg == STOP_MSG):
		handle_stop(conn)
	else:
		print "Unexpected message from central server: " + msg

class HelloThread(StoppableThread):
	def __init__(self):
		StoppableThread.__init__(self, self.init, self.loop, self.uninit)
	def init(self):
		pass
	def loop(self):
		global last_heartbeat, last_heartbeat_lock
		last_heartbeat_lock.acquire()
		print "Last Heartbeat: " + str(last_heartbeat)
		print "Current Time: " + str(time.time())
		if (time.time()-last_heartbeat > 5*HEARTBEAT_INT):
			result = send_and_get_ack(get_config("server_addr"), int(get_config("server_port")), HELLO_MSG)
			if (result == None):
				last_heartbeat = time.time()
				print "Successfully connected to central server"
				result = send_and_get_ack(get_config("server_addr"), int(get_config("server_port")), NAME_MSG_PREFIX + get_config("node_id"))
				if (result == None):
					last_heartbeat = time.time()
					print "Successfully exchanged name with central server"
					print "Awaiting Instructions..."
				else:
					print "Name exchange with central server failed: " + result
			else:
				print "Hello with central server failed: " + result
		last_heartbeat_lock.release()
		time.sleep(HEARTBEAT_INT)
	def uninit(self):
		pass
			
helloThread = HelloThread()
helloThread.start()

centralServerHandlerThread = ConnectionHandlerThread(get_config("node_addr"), int(get_config("node_port")), handle_server_message)
centralServerHandlerThread.start()

while True:
	try:
		time.sleep(1000)
	except KeyboardInterrupt:
		helloThread.stop()
		centralServerHandlerThread.stop()
		exit(1)