#!/usr/bin/python

import logging
import select
import socket
import sys
import threading
import time

from datamap_daemon_common import *

# System State
collection_nodes = {}
collection_nodes_lock = threading.Lock()

# Handler for Hello Messages from Collection Nodes
def handle_hello(conn,addr):
	global collection_nodes, collection_nodes_lock
	logging.info("Recieved hello message from " + str(addr[0]))
	collection_nodes_lock.acquire()
	if (not addr[0] in collection_nodes.keys()):
		collection_nodes[addr[0]] = {
			"state" : STATE_CONNECTED,
			"name" : "Unknown",
			"error" : ""
		}
	collection_nodes[addr[0]]["state"] = STATE_CONNECTED
	collection_nodes_lock.release()
	conn.send(ACK_MSG)

# Handler for Name Exchange messages from Colleciton Nodes
def handle_name(conn,addr,msg):
	global collection_nodes, collection_nodes_lock
	name,lat,long = msg.replace(NAME_MSG_PREFIX, "").split("|")
	collection_nodes_lock.acquire()
	if (not addr[0] in collection_nodes.keys()):
		logging.warn("Received name message \"" + name + "\" from " + addr[0] + ", but address does not exist. Sending NACK message")
		conn.send(NACK_MSG)
	else:
		logging.info("Received name \"" + name + "\" from " + addr[0])
		collection_nodes[addr[0]]["name"] = name
		collection_nodes[addr[0]]["lat"] = lat
		collection_nodes[addr[0]]["long"] = long
		conn.send(ACK_MSG)
	collection_nodes_lock.release()

# Handler for Messages from Collection Nodes
def handle_node_message(conn,addr,msg):
	logging.debug("Recieved message \"" + msg + "\" from " + str(addr[0]))
	if (msg == HELLO_MSG):
		handle_hello(conn,addr);
	elif (msg.startswith(NAME_MSG_PREFIX)):
		handle_name(conn,addr,msg)
	else:
		logging.warn("Unknown message recieved from " + str(addr[0]) + ": " + msg)
		
# Handler for Status Request Messages
def handle_status_request(conn):
	global collection_nodes, collection_nodes_lock
	reply = ""
	collection_nodes_lock.acquire()
	reply = "\n"
	for node in collection_nodes.keys():
		reply += node + "|" + collection_nodes[node]["name"] + "|" + collection_nodes[node]["lat"] + "|" + collection_nodes[node]["long"]
		if (collection_nodes[node]["state"] == STATE_ERROR):
			reply += "|" + STATE_ERROR + ":" + collection_nodes[node]["error"]
		else:
			reply += "|" + collection_nodes[node]["state"]
		reply += "\n"
	logging.debug("Got status request. Replying with: \n" + reply)
	conn.send(reply)
	collection_nodes_lock.release()	
	
# Handler for Start Command Messages
def handle_start_stop_remove_command(conn,msg,prefix,node_msg):
	global collection_nodes, collection_nodes_lock
	nodes = list(set(msg.replace(prefix,"").split()))
	collection_nodes_lock.acquire()
	for node in nodes:
		if not (node in collection_nodes.keys() or node == "all"):
			logging.warn("Controller requested " + node_msg + " of node \"" + node + "\", but it doesn't exist. Sending NACK.")
			conn.send(NACK_MSG)
			collection_nodes_lock.release()
			return
		if node_msg == REMOVE_COMMAND_PREFIX and node != "all" and collection_nodes[node]["state"] != "DISCONNECTED":
			logging.warn("Controller requested removal of node \"" + node + "\", but it is still connected. Sending NACK.")
			conn.send(NACK_MSG)
			collection_nodes_lock.release()
			return
	if "all" in nodes:
		while ("all" in nodes):
			nodes.remove("all")
		for node in collection_nodes.keys():
			nodes.append(node)
	success = True
	for node in nodes:
		if node_msg == REMOVE_COMMAND_PREFIX:
			del collection_nodes[node]
		else:
			logging.info("Sending " + node_msg + " message to " + node)
			result = send_and_get_ack(node, int(get_config("node_port")), node_msg)
			if (result == None):
				if (node_msg == START_MSG):
					collection_nodes[node]["state"] = STATE_COLLECTING
				elif (node_msg == STOP_MSG):
					collection_nodes[node]["state"] = STATE_CONNECTED
			else:
				logging.error(node_msg + "ing node " + str(node) + " failed: " + str(result))
				success = False
	collection_nodes_lock.release()
	if (success):
		conn.send(ACK_MSG)
	else:
		conn.send(NACK_MSG)
		
# Handler for Control Messages
def handle_control_message(conn,addr,msg):
	logging.debug("Received control message \"" + msg + "\" from " + str(addr[0]))
	if (msg == STATUS_MSG):
		handle_status_request(conn)
	elif (msg.startswith(START_COMMAND_PREFIX)):
		handle_start_stop_remove_command(conn,msg,START_COMMAND_PREFIX,START_MSG)
	elif (msg.startswith(STOP_COMMAND_PREFIX)):
		handle_start_stop_remove_command(conn,msg,STOP_COMMAND_PREFIX,STOP_MSG)
	elif (msg.startswith(REMOVE_COMMAND_PREFIX)):
		handle_start_stop_remove_command(conn,msg,REMOVE_COMMAND_PREFIX,REMOVE_COMMAND_PREFIX)
	else:
		logging.warn("Unknown Control Message Recieved: " + msg)

# Thread for sending heartbeat messages to the collection nodes
class HeartbeatThread(StoppableThread):
	def __init__(self):
		StoppableThread.__init__(self, self.init, self.loop, self.uninit)
	def init(self):
		pass
	def loop(self):
		collection_nodes_lock.acquire()
		logging.debug("Current Collection Nodes: " + str(collection_nodes))
		for node in collection_nodes.keys():
			logging.debug("Sending heartbeat message to " + node)
			if (collection_nodes[node]["state"] != STATE_DISCONNECTED):
				result = send_and_get_ack_response(node, int(get_config("node_port")), HEARTBEAT_MSG)
				if (not result.startswith("Fail:")):
					logging.debug("Heartbeat with " + node + " successful")
					collection_nodes[node]["state"] = result
				else:
					logging.info("Heartbeat with node " + node + " failed: " + result + ". Assuming disconnected.")
					collection_nodes[node]["state"] = STATE_DISCONNECTED
		collection_nodes_lock.release()
		time.sleep(HEARTBEAT_INT)
	def uninit(self):
		pass

# Start the required threads
collectionNodeHandlerThread = ConnectionHandlerThread(int(get_config("server_port")), handle_node_message)
collectionNodeHandlerThread.start()

controlHandlerThread = ConnectionHandlerThread(int(get_config("control_port")), handle_control_message)
controlHandlerThread.start()

heartbeatThread = HeartbeatThread()
heartbeatThread.start()

# Run forever, unless there is a keyboard interrupt
while True:
	try:
		time.sleep(1000)
	except KeyboardInterrupt:
		collectionNodeHandlerThread.stop()
		controlHandlerThread.stop()
		heartbeatThread.stop()
		exit(1)
